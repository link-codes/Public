import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Update
from aiogram.utils.executor import start_webhook
from fastapi import FastAPI
import uvicorn

TOKEN = os.getenv("TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WEBHOOK_URL = f"https://–¢–í–û–ô_RAILWAY_URL/webhook"  # URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))  # Railway –¥–∞—ë—Ç PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("dating.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    name TEXT,
    age INTEGER,
    city TEXT,
    interests TEXT
)
""")
conn.commit()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±—ã—Å—Ç—Ä—ã–π –±–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö üöÄ")


# Telegram –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å—é–¥–∞
@app.post(WEBHOOK_PATH)
async def telegram_webhook(update: dict):
    telegram_update = Update(**update)
    await dp.process_update(telegram_update)


# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown():
    await bot.delete_webhook()


if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup())
    uvicorn.run(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
